# -*- coding: utf-8 -*-
"""day 55 introduction oops in python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ZE33l5pUM05s3VKGtpdeDi_LtPJcs-Z

Object-oriented programming (OOP) is a programming paradigm that uses objects, which are instances of classes, to organize and structure code. Python is an object-oriented programming language that supports OOP principles. The key concepts in OOP with Python include:

Classes and Objects:

Class: A blueprint or template for creating objects. It defines attributes (characteristics) and methods (functions) that the objects will have.
Object: An instance of a class. Objects are created from classes and represent real-world entities.
Encapsulation:

The bundling of data (attributes) and methods that operate on the data within a class. It restricts access to some of the object's components and prevents direct modification.
Inheritance:

A mechanism that allows a new class (subclass or derived class) to inherit properties and behaviors from an existing class (superclass or base class). It promotes code reusability and establishes a hierarchy.
Polymorphism:

The ability of different classes to be used interchangeably. It allows objects of different classes to be treated as objects of a common base class.
Abstraction:

Simplifying complex systems by modeling classes based on their essential characteristics. Abstraction focuses on what an object does rather than how it achieves it.
"""

class Person:
    # Constructor method to initialize attributes
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # Method to display information about the person
    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}")

# Creating objects (instances) of the Person class
person1 = Person("Alice", 25)
person2 = Person("Bob", 30)

# Accessing attributes and calling methods
person1.display_info()
person2.display_info()

