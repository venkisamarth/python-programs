Decorating a function without arguments:
python
Copy code
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
Decorating a function with arguments:
python
Copy code
def my_decorator(func):
    def wrapper(*args, **kwargs):
        print("Something is happening before the function is called.")
        result = func(*args, **kwargs)
        print("Something is happening after the function is called.")
        return result
    return wrapper

@my_decorator
def greet(name):
    print(f"Hello, {name}!")

greet("Alice")
Decorating a function that returns a value:
python
Copy code
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        result = func()
        print("Something is happening after the function is called.")
        return result
    return wrapper

@my_decorator
def get_answer():
    return 42

print(get_answer())
Decorating a function with arguments and returning a value:
python
Copy code
def my_decorator(func):
    def wrapper(*args, **kwargs):
        print("Something is happening before the function is called.")
        result = func(*args, **kwargs)
        print("Something is happening after the function is called.")
        return result
    return wrapper

@my_decorator
def add(a, b):
    return a + b

print(add(3, 5))
Decorating a method within a class:
python
Copy code
def my_decorator(func):
    def wrapper(self):
        print("Something is happening before the method is called.")
        result = func(self)
        print("Something is happening after the method is called.")
        return result
    return wrapper

class MyClass:
    @my_decorator
    def my_method(self):
        print("Hello from MyClass!")

obj = MyClass()
obj.my_method()
Decorating a class:
python
Copy code
def my_decorator(cls):
    class NewClass(cls):
        def new_method(self):
            print("This is a new method!")
    return NewClass

@my_decorator
class MyBaseClass:
    def my_method(self):
        print("Hello from MyBaseClass!")

obj = MyBaseClass()
obj.my_method()
obj.new_method()
Applying multiple decorators to a single function:
python
Copy code
def decorator1(func):
    def wrapper():
        print("Decorator 1")
        func()
    return wrapper

def decorator2(func):
    def wrapper():
        print("Decorator 2")
        func()
    return wrapper

@decorator1
@decorator2
def my_function():
    print("Original function")

my_function()
Decorating a function with parameters in the decorator:
python
Copy code
def my_decorator(arg):
    def decorator(func):
        def wrapper(*args, **kwargs):
            print("Decorator argument:", arg)
            result = func(*args, **kwargs)
            return result
        return wrapper
    return decorator

@my_decorator("Hello")
def say_name(name):
    print("Hello,", name)

say_name("Alice")
Using a class as a decorator:
python
Copy code
class MyDecorator:
    def __init__(self, func):
        self.func = func
    
    def __call__(self, *args, **kwargs):
        print("Before the function is called.")
        result = self.func(*args, **kwargs)
        print("After the function is called.")
        return result

@MyDecorator
def my_function():
    print("Inside the function.")

my_function()
Decorating a generator function:
python
Copy code
def my_decorator(func):
    def wrapper(*args, **kwargs):
        gen = func(*args, **kwargs)
        return (x * 2 for x in gen)
    return wrapper

@my_decorator
def my_generator():
    yield 1
    yield 2
    yield 3

for num in my_generator():
    print(num)