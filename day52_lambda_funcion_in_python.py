# -*- coding: utf-8 -*-
"""day52  lambda funcion in python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11fkr97p-b145DR3LlIapq3BV-teGv_GD

Lambda Fucnitons in Ptyhon
In python , a lambda funion is a small anonymous funcion without a name. It is defined  usding the lambda keyword and has following and has the following sysntax:
"""

# lambda arguments: expression

"""Lambda fucnions are often used in situations where a small fucnion ius required for a short period of time,They are commonly used as arguments used as arguments to higher-order funcions, such as map,fitlter, and reduce.

Here is example of how to use a lambda function:
"""

def double(x):
  return x*2
# lambda function to double the input
square=lambda x:x**2
print(square(3))

"""The above lambda fucnion has the same funcionality as the double  fucnion defined earlier. however, the lambda fucnion is anonymous, as it does no have a name.

Lambda fucnions can have multiple arguments, jst like regular function . Here is an example of a lambda fucnion with multiple arguments:
"""

def multiply(x,y):
  return x*y
multiply(2,3)

multiply= lambda x,y: x*y
print(multiply(23,2))

"""lambda function  can also include multiply statements, but they are limited  to a single expression. for example:"""

lambda x,y:print(f'{x}*{y}={x*y}')

"""In the above example, the lambda function include a print statemet, but it is still limited to a single ewxpressin.

Lambda fucnionn are often used in conjection with higher-order funioctios, such as map.filter and reduce which we will look into later
"""

# Example1:
addition = lambda x, y: x + y
result=addition(5,3)
print(result)

def operate_on_numbers(x,y,operation):
  return operation(x,y)

result1=operate_on_numbers(5,3,lambda a,b: a+b)
print(result1)

# Example 1: Generalized operation on two numbers
def operate_on_numbers(x, y, operation):
    return operation(x, y)

result1 = operate_on_numbers(5, 3, lambda a, b: a + b)

# Example 2: Custom operation on a list of numbers
def custom_operation_on_list(numbers, operation):
    return [operation(x) for x in numbers]

result2 = custom_operation_on_list([1, 2, 3, 4], lambda x: x**2)

# Example 3: Filtering elements in a list
def filter_list(elements, condition):
    return [x for x in elements if condition(x)]

result3 = filter_list([1, 2, 3, 4, 5], lambda x: x % 2 == 0)




def filter_list(elemets,conditions):
  return[x for x in elemets if conditions(x)]
result3 =filter_list([1,2,3,4,5],lambda x: x% 2 ==2)


# Example 4: Mapping elements in a list
def map_list(elements, transformation):
    return [transformation(x) for x in elements]

result4 = map_list([1, 2, 3, 4], lambda x: x * 2)


def map_list(elements,transformation):
  return [transformation(x) for x in elements]
result4=map_list([1,2,3,4,5], lambda x: x*2)


# Example 5: Custom aggregation of a list
def custom_aggregation(elements, initial_value, aggregation):
    result = initial_value
    for x in elements:
        result = aggregation(result, x)
    return result

result5 = custom_aggregation([1, 2, 3, 4], 0, lambda acc, x: acc + x)



def custom_aggregation(elements, initial_value, aggregation):
    result = initial_value
    for x in elements:
        result = aggregation(result, x)
    return result

result5 = custom_aggregation([1, 2, 3, 4], 0, lambda acc, x: acc + x)
# Example 6: Sorting a list with custom key
def custom_sort(elements, key_function):
    return sorted(elements, key=key_function)


result6 = custom_sort(['apple', 'banana', 'cherry'], key_function=lambda x: len(x))


def custom_sort(elements,key_fucntion):
  return sorted(elements,key=key_function)
result=custom_sort(['apple',"banana","cherry"],key_function=lambda x:len(x))


# Example 7: Applying a function to each element in a list
def apply_function_to_list(elements, function):
    return [function(x) for x in elements]

result7 = apply_function_to_list([1, 2, 3, 4], lambda x: x**3)



def apply_function_to_list(elements,function):

# Example 8: Checking a condition for all elements in a list
def all_elements_satisfy(elements, condition):
    return all(condition(x) for x in elements)

result8 = all_elements_satisfy([2, 4, 6, 8], lambda x: x % 2 == 0)

# Example 9: Using a custom function for element-wise operations
def element_wise_operation(list1, list2, operation):
    return [operation(x, y) for x, y in zip(list1, list2)]

result9 = element_wise_operation([1, 2, 3], [4, 5, 6], lambda x, y: x + y)

# Example 10: Combining two lists with a binary operation
def combine_lists(list1, list2, combine_function):
    return [combine_function(x, y) for x, y in zip(list1, list2)]

result10 = combine_lists([1, 2, 3], [4, 5, 6], lambda x, y: x * y)

# Example 11: Filtering a dictionary based on a condition
def filter_dict(dictionary, condition):
    return {key: value for key, value in dictionary.items() if condition(value)}

result11 = filter_dict({'apple': 5, 'banana': 2, 'orange': 8}, lambda x: x > 5)

# Example 12: Custom operation on pairs of elements
def custom_operation_on_pairs(list1, list2, operation):
    return [operation(x, y) for x, y in zip(list1, list2)]

result12 = custom_operation_on_pairs([1, 2, 3], [4, 5, 6], lambda x, y: x - y)

# Example 13: Applying a function to each character in a string
def apply_function_to_string(string, function):
    return ''.join([function(char) for char in string])

result13 = apply_function_to_string('hello', lambda x: x.upper())

# Example 14: Checking if a condition holds for any element in a list
def any_element_satisfies(elements, condition):
    return any(condition(x) for x in elements)

result14 = any_element_satisfies([1, 2, 3, 4], lambda x: x % 2 == 0)

# Example 15: Performing a custom operation on a nested list
def custom_operation_on_nested_list(nested_list, operation):
    return [[operation(x) for x in sublist] for sublist in nested_list]

result15 = custom_operation_on_nested_list([[1, 2, 3], [4, 5, 6]], lambda x: x**2)

# Example 16: Combining strings with a separator
def combine_strings_with_separator(strings, separator_function):
    return separator_function.join(strings)

result16 = combine_strings_with_separator(['apple', 'banana', 'cherry'], separator_function=lambda x: '-' + x + '-')

# Example 17: Applying a function to each element in a set
def apply_function_to_set(input_set, function):
    return {function(element) for element in input_set}

result17 = apply_function_to_set({1, 2, 3, 4}, lambda x: x**2)

# Example 18: Filtering a list of tuples based on a condition
def filter_tuples(tuples, condition):
    return [t for t in tuples if condition(*t)]

result18 = filter_tuples([(1, 2), (3, 4), (5, 6)], lambda x, y: x + y > 5)

# Example 19: Custom operation on a list of dictionaries
def custom_operation_on_dict_list(dict_list, operation):
    return [operation(d) for d in dict_list]

result19 = custom_operation_on_dict_list([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}], lambda x: sum(x.values()))

# Example 20: Filtering a list based on a custom predicate
def filter_custom_predicate(elements, predicate):
    return [x for x in elements if predicate(x)]

result20 = filter_custom_predicate([1, 2, 3, 4, 5], lambda x: x % 2 == 0)

