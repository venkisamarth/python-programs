# -*- coding: utf-8 -*-
"""Day29 Docstrings in python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o86uge91_35C8aFTNuR-FG4ZWC3taqSv

Docstings  in python

Python docstrings are the strings literals that appear right after the defination  of a function, metod, class, or module.
"""

#Example
def square(n):
  """ Takes in a numbern, returns the square of n"""
  print(n**2)
square(5)

"""Here,

 "Takes in a numbers n,returns the square of n" is docstrigs which will not appera in output
"""

def add(num1, num2):
    """
    Add up two integer numbers.
    This function simply wraps the ``+`` operator, and does not
    do anything interesting, except for illustrating what
    the docstring of a very simple function looks like.
    Parameters
    ----------
    num1 : int
        First number to add.
    num2 : int
        Second number to add.
    Returns
    -------
    int
        The sum of ``num1`` and ``num2``.
    See Also
    --------
    subtract : Subtract one integer from another.
    Examples
    --------
    >>> add(2, 2)
    4
    >>> add(25, 0)
    25
    >>> add(10, -10)
    0
    """
    return num1 + num2

"""Python comments vs Docstrings

Python Comments



Comments are descriptions that help programmers better understand the intent and functionality of the program. They are completely ignored by the Python interpreter.

Python Doc attribute


whenevr sting lterals are present just afte the defination of a funcction , module class or method , they are associated with the object  as their doc attribute, We can leter use this attribut to retrive this docstring.
"""

def square(n):
  """This in a number n, return the square of n"""
  return n**2
print(square.__doc__)

"""PEP 8 is a document that provides guidelines and best practices on how to write Python code. It was written in 2001 by Guido van Rossum, Barry Warsaw, and Nick Coghlan. The primary focus of PEP 8 is to improve the readability and consistency of Python code.

PEP stands for Python Enhancement Proposal, and there are several of them. A PEP is a document that describes new features proposed for Python and documents aspects of Python, like design and style, for the community.

The ZEN of Ptyhon

Long time Pythoneer Tim Peters succinctly channels the BDFL’s guiding principles for Python’s design into 20 aphorisms, only 19 of which have been written down.
"""

# Explicit is better than implicit.
# Simple is better than complex.
# Complex is better than complicated.
# Flat is better than nested.
# Sparse is better than dense.
# Readability counts.
# Special cases aren't special enough to break the rules.
# Although practicality beats purity.
# Errors should never pass silently.
# Unless explicitly silenced.
# In the face of ambiguity, refuse the temptation to guess.
# There should be one-- and preferably only one --obvious way to do it.
# Although that way may not be obvious at first unless you're Dutch.
# Now is better than never.
# Although never is often better than *right* now.
# If the implementation is hard to explain, it's a bad idea.
# If the implementation is easy to explain, it may be a good idea.
# Namespaces are one honking great idea -- let's do more of those!

import this

# Example 1: Simple function with docstring
def greet(name):
    """
    This function greets the person passed in as a parameter.
    """
    return f"Hello, {name}!"

# Example 2: Function with parameters and return value explained
def add(a, b):
    """
    This function adds two numbers and returns the result.
    Parameters:
    - a (int): The first number.
    - b (int): The second number.
    Returns:
    int: The sum of a and b.
    """
    return a + b

# Example 3: Function with default parameter and docstring
def exponentiate(base, exponent=2):
    """
    This function raises the base to the specified exponent.
    Parameters:
    - base (int): The base number.
    - exponent (int): The exponent to raise the base to (default is 2).
    Returns:
    int: The result of base raised to the exponent power.
    """
    return base ** exponent

# Example 4: Function with variable arguments
def calculate_sum(*numbers):
    """
    This function calculates the sum of variable numbers.
    Parameters:
    - *numbers (int): Variable number of integers.
    Returns:
    int: The sum of all the input numbers.
    """
    return sum(numbers)

# Example 5: Function with variable keyword arguments
def print_info(**kwargs):
    """
    This function prints information provided as keyword arguments.
    Parameters:
    - **kwargs (str): Variable keyword arguments.
    """
    for key, value in kwargs.items():
        print(f"{key}: {value}")

# Example 6: Function with type hints in docstring
def multiply(a: float, b: float) -> float:
    """
    This function multiplies two numbers.
    Parameters:
    - a (float): The first number.
    - b (float): The second number.
    Returns:
    float: The product of a and b.
    """
    return a * b

# Example 7: Function with explanation of possible exceptions
def divide(a, b):
    """
    This function divides two numbers.
    Parameters:
    - a (float): The numerator.
    - b (float): The denominator.
    Returns:
    float: The result of a divided by b.
    Raises:
    ZeroDivisionError: If the denominator is zero.
    """
    if b == 0:
        raise ZeroDivisionError("Division by zero is undefined.")
    return a / b

# Example 8: Function with a multiline docstring
def complex_function(x, y):
    """
    This function performs a complex computation.
    It takes two parameters, x and y, and applies a series
    of operations to compute the final result.

    Parameters:
    - x (int): The first input.
    - y (int): The second input.

    Returns:
    int: The result of the complex computation.
    """
    # Complex computation logic goes here
    result = x * (x + y) / (y - 1)
    return result

# Example 9: Function with an example in the docstring
def power_of_two(n):
    """
    This function calculates the power of two for a given number.
    Parameters:
    - n (int): The exponent.
    Returns:
    int: 2 raised to the power of n.

    Example:
    >>> power_of_two(3)
    8
    """
    return 2 ** n

# Example 10: Function with a note in the docstring
def square_root(n):
    """
    This function calculates the square root of a number.
    Parameters:
    - n (float): The number to find the square root of.
    Returns:
    float: The square root of n.

    Note:
    The input should be a non-negative number.
    """
    return n ** 0.5

# Example 11: Function with a reference link in the docstring
def example_function():
    """
    This function serves as an example.
    For more information, see the documentation at:
    https://example.com/function_documentation
    """
    # Function implementation here

# Example 12: Function with an empty docstring
def empty_function():
    """
    """

# Example 13: Function with docstring explaining return None
def function_with_none_return():
    """
    This function does some operation but doesn't return any value.
    """
    # Operation logic here

# Example 14: Function with docstring containing raw HTML
def function_with_html_docstring():
    """
    This function demonstrates the use of raw HTML in docstrings.
    <p>It can include HTML tags for formatting.</p>
    """

# Example 15: Function with multiline parameters and returns description
def complex_calculation(
    x: float,
    y: float,
    z: float = 1.0,
) -> float:
    """
    Perform a complex calculation with multiple parameters.

    Parameters:
    - x (float): The first input.
    - y (float): The second input.
    - z (float): An optional third input (default is 1.0).

    Returns:
    float: The result of the complex calculation.
    """
    result = x * y / z
    return result

