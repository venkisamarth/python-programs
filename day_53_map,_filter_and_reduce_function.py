# -*- coding: utf-8 -*-
"""day 53 Map, filter and  reduce function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yrZ7ybgOXehd7h2jQaHNHyUxogsqBTQJ

Map, filter and Reduce

 python, the map filter and reduce function are bulilt -in fucnions that allow you to apply a fucnion
to a sequence pf elments and return a bnew sequence. these fucnions are know as
higher-order functions as they take other fucnions as arguments.

map()

the map fucnion applies a function to each elements in a sequence  and return a new sequence containing the transformed elements, the map fucnion has the following has the followin systax
"""

map(function,iterable)

"""The function argument is a function that is applied to each element in the iterable argument. The iterable argument can be a list, tuple, or any other iterable object.

Here is an example of how to use the map function:
"""

numbers=[1,2,3,4,5]
double=map(lambda x:x*2,numbers)

print(list(double))

# Example doubling the each elements in list
numebrs=[1,2,3,4,54,5]
doubled_numbers=list(map(lambda x:x*2,numbers))
print(doubled_numbers)

# example 2 Squaring each elements in list
list1=[1,2,3,4,4,5,5]
squared_elements=list(map(lambda x:x**2,numbers))
print(squared_elements)

# Example 3 converting the string to uppercase
words=["apple","banana","venki"]
uppecase_word=list(map(lambda x:x.upper(),words))
print(uppecase_word)

# Examplem 4 calulating the len of each word in the list
word_lengths = list(map(lambda x: len(x), words))
print(word_lengths)

# Example 5 negative each elemets in  a list:
negative_numbers=list(map(lambda x: -x,numbers))
print(negative_numbers)

#  example6 checking if the number is even or odd
is_even=list(map(lambda x: x%2==0,numbers))
print(is_even)

# Example trimming the whitspace from the beginnign and end
names=["venki", "   raju","play  "]
trimmed_name=list(map(lambda x: x.strip(), names))
print(trimmed_name)

"""In the above examples the lambda function lambda x:x*2 is used to double each elements in the numbers

filter()

The filter function fitlers a sequence of elements based on a givben predicte and returns a a new sequence containing only the elements that meet the predict. The filter function has the following  syntax:
"""

# filter(predicte,iterable)

"""the prediction arguments is a fuction that returns a boolean value and is applied to each elements in the iterable argiments. the iterable argimets The iterable argimetns cabn vbe a list, tuple or any other iterable object.

herer is the exmaple of how to use the filter functions:
"""

numbers=[1,2,3,4,45]
evens=filter(lambda x:x%2==0, numbers)
print(evens)
print(list(evens))

"""Here are the some example of the fitler fucntion"""

# Example 1 filtering the even numbers from a list

list1=[1,2,3,4,4,5,6,7,8,8,9,10]
even_numers =list(filter(lambda x: x%2==0,list1))
print(even_numers)

#Example 2L Filtering the words longer than 5 characters form a list of words

words=["apple","banana","mango"]
fitlerd_long_word=list(filter(lambda x :len(x)>5,words))
print(fitlerd_long_word)

# Example 5 : filtering the prime numbers from a list
def is_prime(n):
  if n<2:
    return False
  for i in range(2,int(n**5)+1):
    if n % i ==0:
      return False
    return True
numbers=[1,2,3,4,5,6,7]
filterd_primes=list(filter(is_prime,numbers))
print(filterd_primes)

"""reduce ()

The reduce function is a higher-order function that applies a function to a sequence and returns a single value. It is a part of the functools module in Python and has the following syntax:

reduce(fu
"""

from functools import reduce
numbers=[1,2,3,4,3,4,5]
sum=reduce (lambda x,y:x+y,numbers)
print(sum)

"""In the above example, the reduce function applies the lambda function lambda x, y: x + y to the elements in the numbers list. The lambda function adds the two arguments x and y and returns the result. The reduce function applies the lambda function to the first two elements in the list (1 and 2), then applies the function to the result (3) and the next element (3), and so on. The final result is the sum of all the elements in the list, which is 15.

It is important to note that the reduce function requires the functools module to be imported in order to use it.
"""

from functools import reduce
numbers=[1,2,3,4,5,4]
sum_result=reduce(lambda x,y:x+y, numbers)
print(sum_result)

# Calculate the product of a list of numbers
product_result=reduce(lambda x,y:x*y,numbers)
print(product_result)

